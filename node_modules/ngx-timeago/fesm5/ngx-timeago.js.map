{"version":3,"file":"ngx-timeago.js.map","sources":["ng://ngx-timeago/util.ts","ng://ngx-timeago/timeago.clock.ts","ng://ngx-timeago/timeago.intl.ts","ng://ngx-timeago/timeago.formatter.ts","ng://ngx-timeago/timeago.directive.ts","ng://ngx-timeago/timeago.pipe.ts","ng://ngx-timeago/timeago.module.ts"],"sourcesContent":["export function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function dateParser(date: any): Date {\n  const parsed = new Date(date);\n  if (!Number.isNaN(parsed.valueOf())) {\n    return parsed;\n  }\n\n  const parts: string[] = String(date).match(/\\d+/g);\n  if (parts === null || parts.length <= 2) {\n    return parsed;\n  } else {\n    const [firstP, secondP, ...restPs] = parts.map(x => parseInt(x, 10));\n    return new Date(Date.UTC(firstP, secondP - 1, ...restPs));\n  }\n}\n\nexport const MINUTE = 60;\nexport const HOUR = MINUTE * 60;\nexport const DAY = HOUR * 24;\nexport const WEEK = DAY * 7;\nexport const MONTH = DAY * 30;\nexport const YEAR = DAY * 365;\n","import { Injectable } from '@angular/core';\nimport { Observable, of, empty, timer } from 'rxjs';\nimport { expand, skip } from 'rxjs/operators';\nimport { MINUTE, HOUR, DAY } from './util';\n\nexport abstract class TimeagoClock {\n  abstract tick(then: number): Observable<any>;\n}\n\n@Injectable()\nexport class TimeagoDefaultClock extends TimeagoClock {\n  tick(then: number): Observable<any> {\n    return of(0)\n      .pipe(\n        expand(() => {\n          const now = Date.now();\n          const seconds = Math.round(Math.abs(now - then) / 1000);\n\n          const period =\n            seconds < MINUTE\n              ? 1000\n              : seconds < HOUR\n                ? 1000 * MINUTE\n                : seconds < DAY\n                  ? 1000 * HOUR\n                  : 0;\n\n          return period ? timer(period) : empty();\n        }),\n        skip(1)\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { StringOrFn, NumberArray } from './timeago.formatter';\n\nexport interface IL10nsStrings {\n  prefixAgo?: StringOrFn;\n  prefixFromNow?: StringOrFn;\n  suffixAgo?: StringOrFn;\n  suffixFromNow?: StringOrFn;\n  second?: StringOrFn;\n  seconds?: StringOrFn;\n  minute?: StringOrFn;\n  minutes?: StringOrFn;\n  hour?: StringOrFn;\n  hours?: StringOrFn;\n  day?: StringOrFn;\n  days?: StringOrFn;\n  week?: StringOrFn;\n  weeks?: StringOrFn;\n  month?: StringOrFn;\n  months?: StringOrFn;\n  year?: StringOrFn;\n  years?: StringOrFn;\n  wordSeparator?: string;\n  numbers?: NumberArray;\n};\n\n/**\n * To modify the text displayed, create a new instance of TimeagoIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class TimeagoIntl {\n\n  strings: IL10nsStrings;\n\n  /**\n   * Stream that emits whenever the l10n strings are changed\n   * Use this to notify directives if the l10n strings have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n}\n","import { Injectable } from '@angular/core';\nimport { TimeagoIntl } from './timeago.intl';\nimport { MINUTE, HOUR, DAY, WEEK, MONTH, YEAR } from './util';\n\nexport type Unit = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n\nexport type Suffix = 'ago' | 'from now';\n\nexport type StringOrFn = ((value: number, millisDelta:  number) => string) | string;\n\nexport type NumberArray = [ string, string, string, string, string, string, string, string, string, string ];\n\nconst defaultFormattter = function(then: number): {value: number, unit: Unit, suffix: Suffix} {\n  const now = Date.now();\n  const seconds = Math.round(Math.abs(now - then) / 1000);\n  const suffix: Suffix = then < now ? 'ago' : 'from now';\n\n  const [value, unit]: [number, Unit] =\n    seconds < MINUTE\n      ? [Math.round(seconds), 'second']\n      : seconds < HOUR\n        ? [Math.round(seconds / MINUTE), 'minute']\n        : seconds < DAY\n          ? [Math.round(seconds / HOUR), 'hour']\n          : seconds < WEEK\n            ? [Math.round(seconds / DAY), 'day']\n            : seconds < MONTH\n              ? [Math.round(seconds / WEEK), 'week']\n              : seconds < YEAR\n                ? [Math.round(seconds / MONTH), 'month']\n                : [Math.round(seconds / YEAR), 'year'];\n\n  return {value, unit, suffix};\n}\n\nexport abstract class TimeagoFormatter {\n  abstract format(then: number): string\n}\n\n@Injectable()\nexport class TimeagoDefaultFormatter extends TimeagoFormatter {\n  format(then: number): string {\n    const {suffix, value, unit} = defaultFormattter(then);\n    return this.parse(value, unit, suffix);\n  }\n\n  private parse(value: number, unit: Unit, suffix: Suffix): string {\n    if (value !== 1) {\n      unit += 's';\n    }\n    return value + ' ' + unit + ' ' + suffix;\n  }\n}\n\n@Injectable()\nexport class TimeagoCustomFormatter extends TimeagoFormatter {\n  constructor(private intl: TimeagoIntl) {\n    super();\n  }\n\n  format(then: number): string {\n    const {suffix, value, unit} = defaultFormattter(then);\n    return this.parse(value, unit, suffix, Date.now(), then);\n  }\n\n  private parse(value: number, unit: Unit, suffix: Suffix, now: number, then: number) {\n    /** convert weeks to days if strings don't handle weeks */\n    if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {\n      const days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));\n      value = days;\n      unit = 'day';\n    }\n\n    /** create a normalize function for given value */\n    const normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);\n\n    /** The eventual return value stored in an array so that the wordSeparator can be used */\n    const dateString: string[] = [];\n\n    /** handle prefixes */\n    if (suffix === 'ago' && this.intl.strings.prefixAgo) {\n      dateString.push(normalize(this.intl.strings.prefixAgo));\n    }\n    if (suffix === 'from now' && this.intl.strings.prefixFromNow) {\n      dateString.push(normalize(this.intl.strings.prefixFromNow));\n    }\n\n    /** Handle Main number and unit */\n    const isPlural = value > 1;\n    if (isPlural) {\n      const stringFn: StringOrFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;\n      dateString.push(normalize(stringFn));\n    } else {\n      const stringFn: StringOrFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;\n      dateString.push(normalize(stringFn));\n    }\n\n    /** Handle Suffixes */\n    if (suffix === 'ago' && this.intl.strings.suffixAgo) {\n      dateString.push(normalize(this.intl.strings.suffixAgo));\n    }\n    if (suffix === 'from now' && this.intl.strings.suffixFromNow) {\n      dateString.push(normalize(this.intl.strings.suffixFromNow));\n    }\n\n    /** join the array into a string and return it */\n    const wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';\n    return dateString.join(wordSeparator);\n  }\n\n  /**\n   * If the numbers array is present, format numbers with it,\n   * otherwise just cast the number to a string and return it\n  */\n  private normalizeNumber(numbers: NumberArray, value: number) {\n    return numbers && numbers.length === 10\n      ? String(value).split('')\n          .map((digit: string) => digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit)\n          .join('')\n      : String(value);\n  }\n\n  /**\n   * Take a string or a function that takes number of days and returns a string\n   * and provide a uniform API to create string parts\n  */\n  private normalizeFn(value: number, millisDelta: number, numbers?: NumberArray) {\n    return (stringOrFn: StringOrFn) =>\n      typeof stringOrFn === 'function'\n      ? stringOrFn(value, millisDelta).replace(/%d/g, this.normalizeNumber(numbers, value))\n      : stringOrFn.replace(/%d/g, this.normalizeNumber(numbers, value));\n  }\n}\n","import { Directive, Input, ElementRef, Optional, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { Subscription, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { TimeagoClock } from './timeago.clock';\nimport { TimeagoFormatter } from './timeago.formatter';\nimport { TimeagoIntl } from './timeago.intl';\nimport { isDefined, coerceBooleanProperty, dateParser } from './util';\n\n@Directive({\n  selector: '[timeago]',\n  exportAs: 'timeago',\n})\nexport class TimeagoDirective implements OnChanges, OnDestroy {\n  private intlSubscription: Subscription;\n  private clockSubscription: Subscription;\n\n  /**\n   * Emits on:\n   * - Input change\n   * - Intl change\n   * - Clock tick\n  */\n  stateChanges = new Subject<any>();\n\n  /** The Date to display. An actual Date object or something that can be fed to new Date. */\n  @Input()\n  get date(): any {\n    return this._date;\n  }\n  set date(date: any) {\n    this._date = dateParser(date).valueOf();\n    if (this._date) {\n      if (this.clockSubscription) {\n        this.clockSubscription.unsubscribe();\n        this.clockSubscription = undefined;\n      }\n      this.clockSubscription = this.clock.tick(this.date)\n        .pipe(filter(() => this.live, this))\n        .subscribe(() => this.stateChanges.next());\n    } else {\n      throw new SyntaxError(`Wrong parameter in TimeagoDirective. Expected a valid date, received: ${date}`);\n    }\n  }\n  private _date: number;\n\n  /** If the directive should update itself over time */\n  @Input()\n  get live(): boolean {\n    return this._live;\n  }\n  set live(live: boolean) {\n    this._live = coerceBooleanProperty(live);\n  }\n  private _live = true;\n\n  constructor(@Optional() intl: TimeagoIntl,\n              private cd: ChangeDetectorRef,\n              formatter: TimeagoFormatter,\n              element: ElementRef,\n              private clock: TimeagoClock) {\n    if (intl) {\n      this.intlSubscription = intl.changes.subscribe(() => this.stateChanges.next());\n    }\n    this.stateChanges.subscribe(() => {\n      this.setContent(element.nativeElement, formatter.format(this.date));\n      this.cd.markForCheck();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  setContent(node: any, content: string) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.intlSubscription) {\n      this.intlSubscription.unsubscribe();\n      this.intlSubscription = undefined;\n    }\n    if (this.clockSubscription) {\n      this.clockSubscription.unsubscribe();\n      this.clockSubscription = undefined;\n    }\n    this.stateChanges.complete();\n  }\n}\n","import { Injectable, OnDestroy, Pipe, PipeTransform, Optional, ChangeDetectorRef } from '@angular/core';\nimport { Subscription, Subject } from 'rxjs';\nimport { TimeagoClock } from './timeago.clock';\nimport { TimeagoFormatter } from './timeago.formatter';\nimport { TimeagoIntl } from './timeago.intl';\nimport { isDefined, coerceBooleanProperty, dateParser } from './util';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\n@Pipe({\n  name: 'timeago',\n  pure: false, // required to update the value when stateChanges emits\n})\nexport class TimeagoPipe implements PipeTransform, OnDestroy {\n  private intlSubscription: Subscription;\n  private clockSubscription: Subscription;\n\n  private date: number;\n  private value: string;\n  private live = true;\n\n  /**\n   * Emits on:\n   * - Input change\n   * - Intl change\n   * - Clock tick\n  */\n  stateChanges = new Subject<void>();\n\n  constructor(@Optional() intl: TimeagoIntl,\n    cd: ChangeDetectorRef,\n    formatter: TimeagoFormatter,\n    private clock: TimeagoClock) {\n    if (intl) {\n      this.intlSubscription = intl.changes.subscribe(() => this.stateChanges.next());\n    }\n    this.stateChanges.subscribe(() => {\n      this.value = formatter.format(this.date);\n      cd.markForCheck();\n    });\n  }\n\n  transform(date: any, ...args: any[]) {\n    const _date = dateParser(date).valueOf();\n    let _live: boolean;\n\n    _live = isDefined(args[0])\n      ? coerceBooleanProperty(args[0])\n      : this.live;\n\n    if (this.date === _date && this.live === _live) {\n      return this.value;\n    }\n\n    this.date = _date;\n    this.live = _live;\n\n    if (this.date) {\n      if (this.clockSubscription) {\n        this.clockSubscription.unsubscribe();\n        this.clockSubscription = undefined;\n      }\n      this.clockSubscription = this.clock.tick(this.date)\n        .pipe(filter(() => this.live, this))\n        .subscribe(() => this.stateChanges.next());\n      this.stateChanges.next();\n    } else {\n      throw new SyntaxError(`Wrong parameter in TimeagoPipe. Expected a valid date, received: ${date}`);\n    }\n\n    return this.value;\n  }\n\n  ngOnDestroy() {\n    if (this.intlSubscription) {\n      this.intlSubscription.unsubscribe();\n      this.intlSubscription = undefined;\n    }\n    if (this.clockSubscription) {\n      this.clockSubscription.unsubscribe();\n      this.clockSubscription = undefined;\n    }\n    this.stateChanges.complete();\n  }\n}\n","import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { TimeagoDirective } from './timeago.directive';\nimport { TimeagoPipe } from './timeago.pipe';\nimport { TimeagoClock, TimeagoDefaultClock } from './timeago.clock';\nimport { TimeagoFormatter, TimeagoDefaultFormatter } from './timeago.formatter';\n\nexport interface TimeagoModuleConfig {\n  clock?: Provider;\n  intl?: Provider;\n  formatter?: Provider;\n}\n\n@NgModule({\n  declarations: [\n    TimeagoDirective,\n    TimeagoPipe,\n  ],\n  exports: [\n    TimeagoDirective,\n    TimeagoPipe,\n  ],\n})\nexport class TimeagoModule {\n  /**\n   * Use this method in your root module to provide the TimeagoModule\n   */\n  static forRoot(config: TimeagoModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TimeagoModule,\n      providers: [\n        config.clock || {provide: TimeagoClock, useClass: TimeagoDefaultClock},\n        config.intl || [],\n        config.formatter || {provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter},\n      ],\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TimeagoModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TimeagoModule,\n      providers: [\n        config.clock || {provide: TimeagoClock, useClass: TimeagoDefaultClock},\n        config.intl || [],\n        config.formatter || {provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter},\n      ],\n    };\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;AAAA,mBAA0B,KAAU;IAClC,OAAO,OAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,CAAC;CACvD;;;;;AAED,+BAAsC,KAAU;IAC9C,OAAO,KAAK,IAAI,IAAI,IAAI,KAAG,KAAO,KAAK,OAAO,CAAC;CAChD;;;;;AAED,oBAA2B,IAAS;IAClC,qBAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;QACnC,OAAO,MAAM,CAAC;KACf;IAED,qBAAM,KAAK,GAAa,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACnD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;QACvC,OAAO,MAAM,CAAC;KACf;SAAM;QACL,sEAAO,cAAM,EAAE,eAAO,EAAE,oBAAS,CAAoC;QACrE,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,OAAR,IAAI,YAAK,MAAM,EAAE,OAAO,GAAG,CAAC,GAAK,MAAM,GAAE,CAAC;KAC3D;CACF;AAED,AAAO,qBAAM,MAAM,GAAG,EAAE,CAAC;AACzB,AAAO,qBAAM,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC;AAChC,AAAO,qBAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AAC7B,AAAO,qBAAM,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;AAC5B,AAAO,qBAAM,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC;AAC9B,AAAO,qBAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;;;;;;;;;ACvB9B;;;AAAA;;;uBALA;IAOC,CAAA;;IAGwCA,uCAAY;;;;;;;;IACnD,kCAAI;;;;IAAJ,UAAK,IAAY;QACf,OAAO,EAAE,CAAC,CAAC,CAAC;aACT,IAAI,CACH,MAAM,CAAC;YACL,qBAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,qBAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YAExD,qBAAM,MAAM,GACV,OAAO,GAAG,MAAM;kBACZ,IAAI;kBACJ,OAAO,GAAG,IAAI;sBACZ,IAAI,GAAG,MAAM;sBACb,OAAO,GAAG,GAAG;0BACX,IAAI,GAAG,IAAI;0BACX,CAAC,CAAC;YAEZ,OAAO,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC;SACzC,CAAC,EACF,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;KACL;;gBAtBF,UAAU;;8BATX;EAUyC,YAAY;;;;;;ACVrD;;;;;;;;;;uBAwCoC,IAAI,OAAO,EAAQ;;;gBATtD,UAAU;;sBA/BX;;;;;;;ACYA,qBAAM,iBAAiB,GAAG,UAAS,IAAY;IAC7C,qBAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,qBAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACxD,qBAAM,MAAM,GAAW,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,UAAU,CAAC;IAEvD;;;;;;;;;;;;wEAAO,aAAK,EAAE,YAAI,CAamC;IAErD,OAAO,EAAC,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAC,CAAC;CAC9B,CAAA;;;;AAED;;;AAAA;;;2BAnCA;IAqCC,CAAA;;IAG4CA,2CAAgB;;;;;;;;IAC3D,wCAAM;;;;IAAN,UAAO,IAAY;QACjB,kCAAO,kBAAM,EAAE,gBAAK,EAAE,cAAI,CAA4B;QACtD,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;KACxC;;;;;;;IAEO,uCAAK;;;;;;cAAC,KAAa,EAAE,IAAU,EAAE,MAAc;QACrD,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,IAAI,IAAI,GAAG,CAAC;SACb;QACD,OAAO,KAAK,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC;;;gBAX5C,UAAU;;kCAvCX;EAwC6C,gBAAgB;;IAejBA,0CAAgB;IAC1D,gCAAoB,IAAiB;QAArC,YACE,iBAAO,SACR;QAFmB,UAAI,GAAJ,IAAI,CAAa;;KAEpC;;;;;IAED,uCAAM;;;;IAAN,UAAO,IAAY;QACjB,kCAAO,kBAAM,EAAE,gBAAK,EAAE,cAAI,CAA4B;QACtD,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC;KAC1D;;;;;;;;;IAEO,sCAAK;;;;;;;;cAAC,KAAa,EAAE,IAAU,EAAE,MAAc,EAAE,GAAW,EAAE,IAAY;;QAEhF,IAAI,IAAI,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YAC1E,qBAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YACtE,KAAK,GAAG,IAAI,CAAC;YACb,IAAI,GAAG,KAAK,CAAC;SACd;;;;QAGD,qBAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;;;QAGjF,qBAAM,UAAU,GAAa,EAAE,CAAC;;QAGhC,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACnD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;SACzD;QACD,IAAI,MAAM,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YAC5D,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;SAC7D;;;;QAGD,qBAAM,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC;QAC3B,IAAI,QAAQ,EAAE;YACZ,qBAAM,QAAQ,GAAe,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC;YACtG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtC;aAAM;YACL,qBAAM,QAAQ,GAAe,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC;YACtG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtC;;QAGD,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACnD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;SACzD;QACD,IAAI,MAAM,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YAC5D,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;SAC7D;;;;QAGD,qBAAM,aAAa,GAAG,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,KAAK,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,GAAG,CAAC;QAClH,OAAO,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;;;;;;;;IAOhC,gDAAe;;;;;;;cAAC,OAAoB,EAAE,KAAa;QACzD,OAAO,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,EAAE;cACnC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;iBACpB,GAAG,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,GAAA,CAAC;iBACrF,IAAI,CAAC,EAAE,CAAC;cACX,MAAM,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;IAOZ,4CAAW;;;;;;;;cAAC,KAAa,EAAE,WAAmB,EAAE,OAAqB;;QAC3E,OAAO,UAAC,UAAsB;YAC5B,OAAA,OAAO,UAAU,KAAK,UAAU;kBAC9B,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;kBACnF,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SAAA,CAAC;;;gBA5EvE,UAAU;;;;gBArDF,WAAW;;iCADpB;EAuD4C,gBAAgB;;;;;;ACvD5D;IAuDE,0BAAwB,IAAiB,EACrB,IACR,SAA2B,EAC3B,OAAmB,EACX;QAJpB,iBAYC;QAXmB,OAAE,GAAF,EAAE;QAGF,UAAK,GAAL,KAAK;;;;;;;4BArCV,IAAI,OAAO,EAAO;qBA+BjB,IAAI;QAOlB,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC;SAChF;QACD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;YAC1B,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACpE,KAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SACxB,CAAC,CAAC;KACJ;IA1CD,sBACI,kCAAI;;;;;;QADR;YAEE,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;;;;;QACD,UAAS,IAAS;YAAlB,iBAaC;YAZC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;YACxC,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBAC1B,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;oBACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;iBACpC;gBACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;qBAChD,IAAI,CAAC,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,GAAA,EAAE,IAAI,CAAC,CAAC;qBACnC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC;aAC9C;iBAAM;gBACL,MAAM,IAAI,WAAW,CAAC,2EAAyE,IAAM,CAAC,CAAC;aACxG;SACF;;;OAdA;IAkBD,sBACI,kCAAI;;;;;;QADR;YAEE,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;;;;;QACD,UAAS,IAAa;YACpB,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;SAC1C;;;OAHA;;;;IAoBD,sCAAW;;;IAAX;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;KAC1B;;;;;;IAED,qCAAU;;;;;IAAV,UAAW,IAAS,EAAE,OAAe;QACnC,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC/B,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;SAC5B;aAAM;YACL,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;SACrB;KACF;;;;IAED,sCAAW;;;IAAX;QACE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;YACpC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;SACnC;QACD,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;SACpC;QACD,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;KAC9B;;gBAnFF,SAAS,SAAC;oBACT,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,SAAS;iBACpB;;;;gBANQ,WAAW,uBAkDL,QAAQ;gBAvDgD,iBAAiB;gBAI/E,gBAAgB;gBAJE,UAAU;gBAG5B,YAAY;;;uBAsBlB,KAAK;uBAqBL,KAAK;;2BA9CR;;;;;;;ACAA;IA6BE,qBAAwB,IAAiB,EACvC,EAAqB,EACrB,SAA2B,EACnB;QAHV,iBAWC;QARS,UAAK,GAAL,KAAK;oBAbA,IAAI;;;;;;;4BAQJ,IAAI,OAAO,EAAQ;QAMhC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC;SAChF;QACD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;YAC1B,KAAI,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;YACzC,EAAE,CAAC,YAAY,EAAE,CAAC;SACnB,CAAC,CAAC;KACJ;;;;;;IAED,+BAAS;;;;;IAAT,UAAU,IAAS;QAAnB,iBA6BC;QA7BoB,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACjC,qBAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;QACzC,qBAAI,KAAc,CAAC;QAEnB,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;cACtB,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;cAC9B,IAAI,CAAC,IAAI,CAAC;QAEd,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;YAC9C,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;QAED,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAElB,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;aACpC;YACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;iBAChD,IAAI,CAAC,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,GAAA,EAAE,IAAI,CAAC,CAAC;iBACnC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC1B;aAAM;YACL,MAAM,IAAI,WAAW,CAAC,sEAAoE,IAAM,CAAC,CAAC;SACnG;QAED,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;IAED,iCAAW;;;IAAX;QACE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;YACpC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;SACnC;QACD,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;SACpC;QACD,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;KAC9B;;gBA3EF,UAAU;gBACV,IAAI,SAAC;oBACJ,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,KAAK;iBACZ;;;;gBARQ,WAAW,uBAyBL,QAAQ;gBA7BwC,iBAAiB;gBAGvE,gBAAgB;gBADhB,YAAY;;sBAFrB;;;;;;;ACAA;;;;;;;;;;;IA0BS,qBAAO;;;;;IAAd,UAAe,MAAgC;QAAhC,uBAAA,EAAA,WAAgC;QAC7C,OAAO;YACL,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE;gBACT,MAAM,CAAC,KAAK,IAAI,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,mBAAmB,EAAC;gBACtE,MAAM,CAAC,IAAI,IAAI,EAAE;gBACjB,MAAM,CAAC,SAAS,IAAI,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,uBAAuB,EAAC;aACnF;SACF,CAAC;KACH;;;;;;;;;IAKM,sBAAQ;;;;;IAAf,UAAgB,MAAgC;QAAhC,uBAAA,EAAA,WAAgC;QAC9C,OAAO;YACL,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE;gBACT,MAAM,CAAC,KAAK,IAAI,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,mBAAmB,EAAC;gBACtE,MAAM,CAAC,IAAI,IAAI,EAAE;gBACjB,MAAM,CAAC,SAAS,IAAI,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,uBAAuB,EAAC;aACnF;SACF,CAAC;KACH;;gBArCF,QAAQ,SAAC;oBACR,YAAY,EAAE;wBACZ,gBAAgB;wBAChB,WAAW;qBACZ;oBACD,OAAO,EAAE;wBACP,gBAAgB;wBAChB,WAAW;qBACZ;iBACF;;wBArBD;;;;;;;;;;;;;;;"}
