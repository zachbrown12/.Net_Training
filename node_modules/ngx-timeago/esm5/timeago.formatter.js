/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { TimeagoIntl } from './timeago.intl';
import { MINUTE, HOUR, DAY, WEEK, MONTH, YEAR } from './util';
var /** @type {?} */ defaultFormattter = function (then) {
    var /** @type {?} */ now = Date.now();
    var /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
    var /** @type {?} */ suffix = then < now ? 'ago' : 'from now';
    var _a = tslib_1.__read(seconds < MINUTE
        ? [Math.round(seconds), 'second']
        : seconds < HOUR
            ? [Math.round(seconds / MINUTE), 'minute']
            : seconds < DAY
                ? [Math.round(seconds / HOUR), 'hour']
                : seconds < WEEK
                    ? [Math.round(seconds / DAY), 'day']
                    : seconds < MONTH
                        ? [Math.round(seconds / WEEK), 'week']
                        : seconds < YEAR
                            ? [Math.round(seconds / MONTH), 'month']
                            : [Math.round(seconds / YEAR), 'year'], 2), value = _a[0], unit = _a[1];
    return { value: value, unit: unit, suffix: suffix };
};
var ɵ0 = defaultFormattter;
/**
 * @abstract
 */
var /**
 * @abstract
 */
TimeagoFormatter = /** @class */ (function () {
    function TimeagoFormatter() {
    }
    return TimeagoFormatter;
}());
/**
 * @abstract
 */
export { TimeagoFormatter };
function TimeagoFormatter_tsickle_Closure_declarations() {
    /**
     * @abstract
     * @param {?} then
     * @return {?}
     */
    TimeagoFormatter.prototype.format = function (then) { };
}
var TimeagoDefaultFormatter = /** @class */ (function (_super) {
    tslib_1.__extends(TimeagoDefaultFormatter, _super);
    function TimeagoDefaultFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoDefaultFormatter.prototype.format = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
        return this.parse(value, unit, suffix);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    TimeagoDefaultFormatter.prototype.parse = /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    function (value, unit, suffix) {
        if (value !== 1) {
            unit += 's';
        }
        return value + ' ' + unit + ' ' + suffix;
    };
    TimeagoDefaultFormatter.decorators = [
        { type: Injectable },
    ];
    return TimeagoDefaultFormatter;
}(TimeagoFormatter));
export { TimeagoDefaultFormatter };
var TimeagoCustomFormatter = /** @class */ (function (_super) {
    tslib_1.__extends(TimeagoCustomFormatter, _super);
    function TimeagoCustomFormatter(intl) {
        var _this = _super.call(this) || this;
        _this.intl = intl;
        return _this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.format = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
        return this.parse(value, unit, suffix, Date.now(), then);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.parse = /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    function (value, unit, suffix, now, then) {
        /** convert weeks to days if strings don't handle weeks */
        if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {
            var /** @type {?} */ days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));
            value = days;
            unit = 'day';
        }
        /**
         * create a normalize function for given value
         */
        var /** @type {?} */ normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);
        /**
         * The eventual return value stored in an array so that the wordSeparator can be used
         */
        var /** @type {?} */ dateString = [];
        /** handle prefixes */
        if (suffix === 'ago' && this.intl.strings.prefixAgo) {
            dateString.push(normalize(this.intl.strings.prefixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.prefixFromNow) {
            dateString.push(normalize(this.intl.strings.prefixFromNow));
        }
        /**
         * Handle Main number and unit
         */
        var /** @type {?} */ isPlural = value > 1;
        if (isPlural) {
            var /** @type {?} */ stringFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        else {
            var /** @type {?} */ stringFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        /** Handle Suffixes */
        if (suffix === 'ago' && this.intl.strings.suffixAgo) {
            dateString.push(normalize(this.intl.strings.suffixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.suffixFromNow) {
            dateString.push(normalize(this.intl.strings.suffixFromNow));
        }
        /**
         * join the array into a string and return it
         */
        var /** @type {?} */ wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';
        return dateString.join(wordSeparator);
    };
    /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.normalizeNumber = /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    function (numbers, value) {
        return numbers && numbers.length === 10
            ? String(value).split('')
                .map(function (digit) { return digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit; })
                .join('')
            : String(value);
    };
    /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.normalizeFn = /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    function (value, millisDelta, numbers) {
        var _this = this;
        return function (stringOrFn) {
            return typeof stringOrFn === 'function'
                ? stringOrFn(value, millisDelta).replace(/%d/g, _this.normalizeNumber(numbers, value))
                : stringOrFn.replace(/%d/g, _this.normalizeNumber(numbers, value));
        };
    };
    TimeagoCustomFormatter.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TimeagoCustomFormatter.ctorParameters = function () { return [
        { type: TimeagoIntl }
    ]; };
    return TimeagoCustomFormatter;
}(TimeagoFormatter));
export { TimeagoCustomFormatter };
function TimeagoCustomFormatter_tsickle_Closure_declarations() {
    /** @type {?} */
    TimeagoCustomFormatter.prototype.intl;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,