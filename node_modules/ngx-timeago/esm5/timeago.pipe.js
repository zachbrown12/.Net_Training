/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Pipe, Optional, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
import { TimeagoClock } from './timeago.clock';
import { TimeagoFormatter } from './timeago.formatter';
import { TimeagoIntl } from './timeago.intl';
import { isDefined, coerceBooleanProperty, dateParser } from './util';
import { filter } from 'rxjs/operators';
var TimeagoPipe = /** @class */ (function () {
    function TimeagoPipe(intl, cd, formatter, clock) {
        var _this = this;
        this.clock = clock;
        this.live = true;
        /**
         * Emits on:
         * - Input change
         * - Intl change
         * - Clock tick
         */
        this.stateChanges = new Subject();
        if (intl) {
            this.intlSubscription = intl.changes.subscribe(function () { return _this.stateChanges.next(); });
        }
        this.stateChanges.subscribe(function () {
            _this.value = formatter.format(_this.date);
            cd.markForCheck();
        });
    }
    /**
     * @param {?} date
     * @param {...?} args
     * @return {?}
     */
    TimeagoPipe.prototype.transform = /**
     * @param {?} date
     * @param {...?} args
     * @return {?}
     */
    function (date) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var /** @type {?} */ _date = dateParser(date).valueOf();
        var /** @type {?} */ _live;
        _live = isDefined(args[0])
            ? coerceBooleanProperty(args[0])
            : this.live;
        if (this.date === _date && this.live === _live) {
            return this.value;
        }
        this.date = _date;
        this.live = _live;
        if (this.date) {
            if (this.clockSubscription) {
                this.clockSubscription.unsubscribe();
                this.clockSubscription = undefined;
            }
            this.clockSubscription = this.clock.tick(this.date)
                .pipe(filter(function () { return _this.live; }, this))
                .subscribe(function () { return _this.stateChanges.next(); });
            this.stateChanges.next();
        }
        else {
            throw new SyntaxError("Wrong parameter in TimeagoPipe. Expected a valid date, received: " + date);
        }
        return this.value;
    };
    /**
     * @return {?}
     */
    TimeagoPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
            this.intlSubscription = undefined;
        }
        if (this.clockSubscription) {
            this.clockSubscription.unsubscribe();
            this.clockSubscription = undefined;
        }
        this.stateChanges.complete();
    };
    TimeagoPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'timeago',
                    pure: false,
                },] },
    ];
    /** @nocollapse */
    TimeagoPipe.ctorParameters = function () { return [
        { type: TimeagoIntl, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: TimeagoFormatter },
        { type: TimeagoClock }
    ]; };
    return TimeagoPipe;
}());
export { TimeagoPipe };
function TimeagoPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    TimeagoPipe.prototype.intlSubscription;
    /** @type {?} */
    TimeagoPipe.prototype.clockSubscription;
    /** @type {?} */
    TimeagoPipe.prototype.date;
    /** @type {?} */
    TimeagoPipe.prototype.value;
    /** @type {?} */
    TimeagoPipe.prototype.live;
    /**
     * Emits on:
     * - Input change
     * - Intl change
     * - Clock tick
     * @type {?}
     */
    TimeagoPipe.prototype.stateChanges;
    /** @type {?} */
    TimeagoPipe.prototype.clock;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWFnby5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXRpbWVhZ28vIiwic291cmNlcyI6WyJ0aW1lYWdvLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsSUFBSSxFQUFpQixRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEcsT0FBTyxFQUFnQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUN0RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBdUJ0QyxxQkFBd0IsSUFBaUIsRUFDdkMsRUFBcUIsRUFDckIsU0FBMkIsRUFDbkI7UUFIVixpQkFXQztRQVJTLFVBQUssR0FBTCxLQUFLO29CQWJBLElBQUk7Ozs7Ozs7NEJBUUosSUFBSSxPQUFPLEVBQVE7UUFNaEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNULElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7WUFDMUIsS0FBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbkIsQ0FBQyxDQUFDO0tBQ0o7Ozs7OztJQUVELCtCQUFTOzs7OztJQUFULFVBQVUsSUFBUztRQUFuQixpQkE2QkM7UUE3Qm9CLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsNkJBQWM7O1FBQ2pDLHFCQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMscUJBQUksS0FBYyxDQUFDO1FBRW5CLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFZCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUVsQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQzthQUNwQztZQUNELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2lCQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsSUFBSSxFQUFULENBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDbkMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUF4QixDQUF3QixDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxJQUFJLFdBQVcsQ0FBQyxzRUFBb0UsSUFBTSxDQUFDLENBQUM7U0FDbkc7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUNuQjs7OztJQUVELGlDQUFXOzs7SUFBWDtRQUNFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7U0FDbkM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUM5Qjs7Z0JBM0VGLFVBQVU7Z0JBQ1YsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFBRSxLQUFLO2lCQUNaOzs7O2dCQVJRLFdBQVcsdUJBeUJMLFFBQVE7Z0JBN0J3QyxpQkFBaUI7Z0JBR3ZFLGdCQUFnQjtnQkFEaEIsWUFBWTs7c0JBRnJCOztTQWFhLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3ksIFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE9wdGlvbmFsLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUaW1lYWdvQ2xvY2sgfSBmcm9tICcuL3RpbWVhZ28uY2xvY2snO1xuaW1wb3J0IHsgVGltZWFnb0Zvcm1hdHRlciB9IGZyb20gJy4vdGltZWFnby5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgVGltZWFnb0ludGwgfSBmcm9tICcuL3RpbWVhZ28uaW50bCc7XG5pbXBvcnQgeyBpc0RlZmluZWQsIGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSwgZGF0ZVBhcnNlciB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbkBQaXBlKHtcbiAgbmFtZTogJ3RpbWVhZ28nLFxuICBwdXJlOiBmYWxzZSwgLy8gcmVxdWlyZWQgdG8gdXBkYXRlIHRoZSB2YWx1ZSB3aGVuIHN0YXRlQ2hhbmdlcyBlbWl0c1xufSlcbmV4cG9ydCBjbGFzcyBUaW1lYWdvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgaW50bFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIGNsb2NrU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJpdmF0ZSBkYXRlOiBudW1iZXI7XG4gIHByaXZhdGUgdmFsdWU6IHN0cmluZztcbiAgcHJpdmF0ZSBsaXZlID0gdHJ1ZTtcblxuICAvKipcbiAgICogRW1pdHMgb246XG4gICAqIC0gSW5wdXQgY2hhbmdlXG4gICAqIC0gSW50bCBjaGFuZ2VcbiAgICogLSBDbG9jayB0aWNrXG4gICovXG4gIHN0YXRlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgaW50bDogVGltZWFnb0ludGwsXG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIGZvcm1hdHRlcjogVGltZWFnb0Zvcm1hdHRlcixcbiAgICBwcml2YXRlIGNsb2NrOiBUaW1lYWdvQ2xvY2spIHtcbiAgICBpZiAoaW50bCkge1xuICAgICAgdGhpcy5pbnRsU3Vic2NyaXB0aW9uID0gaW50bC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCkpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy52YWx1ZSA9IGZvcm1hdHRlci5mb3JtYXQodGhpcy5kYXRlKTtcbiAgICAgIGNkLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgdHJhbnNmb3JtKGRhdGU6IGFueSwgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBfZGF0ZSA9IGRhdGVQYXJzZXIoZGF0ZSkudmFsdWVPZigpO1xuICAgIGxldCBfbGl2ZTogYm9vbGVhbjtcblxuICAgIF9saXZlID0gaXNEZWZpbmVkKGFyZ3NbMF0pXG4gICAgICA/IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShhcmdzWzBdKVxuICAgICAgOiB0aGlzLmxpdmU7XG5cbiAgICBpZiAodGhpcy5kYXRlID09PSBfZGF0ZSAmJiB0aGlzLmxpdmUgPT09IF9saXZlKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGUgPSBfZGF0ZTtcbiAgICB0aGlzLmxpdmUgPSBfbGl2ZTtcblxuICAgIGlmICh0aGlzLmRhdGUpIHtcbiAgICAgIGlmICh0aGlzLmNsb2NrU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuY2xvY2tTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jbG9ja1N1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvY2tTdWJzY3JpcHRpb24gPSB0aGlzLmNsb2NrLnRpY2sodGhpcy5kYXRlKVxuICAgICAgICAucGlwZShmaWx0ZXIoKCkgPT4gdGhpcy5saXZlLCB0aGlzKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCkpO1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFdyb25nIHBhcmFtZXRlciBpbiBUaW1lYWdvUGlwZS4gRXhwZWN0ZWQgYSB2YWxpZCBkYXRlLCByZWNlaXZlZDogJHtkYXRlfWApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuaW50bFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5pbnRsU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmludGxTdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmNsb2NrU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmNsb2NrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmNsb2NrU3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=